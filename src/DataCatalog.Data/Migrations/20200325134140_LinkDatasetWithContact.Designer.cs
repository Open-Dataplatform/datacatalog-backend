// <auto-generated />
using System;
using DataCatalog.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataCatalog.Data.Migrations
{
    [DbContext(typeof(DataCatalogContext))]
    [Migration("20200325134140_LinkDatasetWithContact")]
    partial class LinkDatasetWithContact
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataCatalog.Data.Model.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Colour")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("DataCatalog.Data.Model.DataField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Access")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DatasetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Format")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Validation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DatasetId");

                    b.ToTable("DataField");
                });

            modelBuilder.Entity("DataCatalog.Data.Model.Dataset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Frequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrequencyDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resolution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResolutionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SLA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Version")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("VersionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("Dataset");
                });

            modelBuilder.Entity("DataCatalog.Data.Model.DatasetCategory", b =>
                {
                    b.Property<Guid>("DatasetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DatasetId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("DatasetCategory");
                });

            modelBuilder.Entity("DataCatalog.Data.Model.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Member");
                });

            modelBuilder.Entity("DataCatalog.Data.Model.MemberGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MemberGroup");
                });

            modelBuilder.Entity("DataCatalog.Data.Model.MemberGroupMember", b =>
                {
                    b.Property<Guid>("MemberGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MemberGroupId", "MemberId");

                    b.HasIndex("MemberId");

                    b.ToTable("MemberGroupMember");
                });

            modelBuilder.Entity("DataCatalog.Data.Model.Transformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Transformation");
                });

            modelBuilder.Entity("DataCatalog.Data.Model.TransformationDataset", b =>
                {
                    b.Property<Guid>("DatasetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TransformationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TransformationDirection")
                        .HasColumnType("int");

                    b.HasKey("DatasetId", "TransformationId");

                    b.HasIndex("TransformationId");

                    b.ToTable("TransformationDataset");
                });

            modelBuilder.Entity("DataCatalog.Data.Model.DataField", b =>
                {
                    b.HasOne("DataCatalog.Data.Model.Dataset", "Dataset")
                        .WithMany("DataFields")
                        .HasForeignKey("DatasetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataCatalog.Data.Model.Dataset", b =>
                {
                    b.HasOne("DataCatalog.Data.Model.MemberGroup", "Contact")
                        .WithMany("Datasets")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataCatalog.Data.Model.DatasetCategory", b =>
                {
                    b.HasOne("DataCatalog.Data.Model.Category", "Category")
                        .WithMany("DatasetCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataCatalog.Data.Model.Dataset", "Dataset")
                        .WithMany("DatasetCategories")
                        .HasForeignKey("DatasetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataCatalog.Data.Model.MemberGroupMember", b =>
                {
                    b.HasOne("DataCatalog.Data.Model.MemberGroup", "MemberGroup")
                        .WithMany("MemberGroupMembers")
                        .HasForeignKey("MemberGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataCatalog.Data.Model.Member", "Member")
                        .WithMany("MemberGroupMembers")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataCatalog.Data.Model.TransformationDataset", b =>
                {
                    b.HasOne("DataCatalog.Data.Model.Dataset", "Dataset")
                        .WithMany("TransformationDatasets")
                        .HasForeignKey("DatasetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataCatalog.Data.Model.Transformation", "Transformation")
                        .WithMany("TransformationDatasets")
                        .HasForeignKey("TransformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
