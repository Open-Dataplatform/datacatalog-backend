using System;
using AutoFixture;
using AutoFixture.Xunit2;

namespace DataCatalog.Common.UnitTests.AutoMoqAttribute
{
    /// <summary>
    /// Provides auto-generated data specimens generated by AutoFixture as an extension to xUnit.net's Theory attribute with inline data and enables auto-mocking with Moq.
    /// </summary>
    public class MoqInlineAutoDataAttribute : InlineAutoDataAttribute
    {
        protected MoqInlineAutoDataAttribute(
            bool configureMembers,
            Func<IFixture> fixtureFactory,
            params object[] values)
            : base(new MoqAutoDataAttribute(configureMembers, fixtureFactory), values)
        {
        }

        protected MoqInlineAutoDataAttribute(Func<IFixture> fixtureFactory, params object[] values)
            : this(true, fixtureFactory, values)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="T:Energinet.DataPlatform.Shared.Testing.AutoFixture.MoqInlineAutoDataAttribute" /> class with the specified mocking behaviour for its members.
        /// </summary>
        /// <param name="configureMembers">Specifies whether members of a mock will be automatically setup to retrieve the return values from a fixture.</param>
        /// <param name="values">The data values to pass to the theory.</param>
        public MoqInlineAutoDataAttribute(bool configureMembers, params object[] values)
            : this(configureMembers, (Func<IFixture>) (() => (IFixture) new Fixture()), values)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="T:Energinet.DataPlatform.Shared.Testing.AutoFixture.MoqInlineAutoDataAttribute" /> class where the behaviour of its mocked members is to retrieve the return values from a fixture.
        /// </summary>
        /// <param name="values">The data values to pass to the theory.</param>
        public MoqInlineAutoDataAttribute(params object[] values)
            : this(true, values)
        {
        }
    }
}